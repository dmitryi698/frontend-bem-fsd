/*************************************/

/* Variables */

// Font
$main-font              : 'Montserrat';
$secondary-font         : 'Quicksand', 'Open Sans';
$icon                   : 'Material Icons';

$main-font-color        : rgba(31, 32, 65, 0.75);
$main-font-size         : 14px;
$main-font-weight       : normal;
$secondary-font-weight  : bold;
$main-font-style        : normal;
// Size
$xlg                    : 1440px;
$lg                     : 1200px;
$md                     : 980px;
$sm                     : 768px;
$xs                     : 480px;
$xxs                    : 320px;

// Main color
$default                : #ffffff;
$darker                 : #1f2041;
$dark                   : rgba(31, 32, 65, 0.75);
$medium                 : rgba(31, 32, 65, 0.5);
$light                  : rgba(31, 32, 65, 0.25);
$lighter                : rgba(31, 32, 65, 0.05);
$primary                : #bc9cff;
$secondary              : #6fcf97;
$back                   : #e5e5e5;

//Gradients
$primary-grad           : linear-gradient(180deg, rgba(188, 156, 255, 1) 0%, rgba(139, 164, 249, 1) 100%);
$secondary-grad         : linear-gradient(180deg, rgba(111, 207, 151, 1) 0%, rgba(102, 210, 234, 1) 100%);

/* Variables */

/*************************************/

/********** Mixins and functions **********/

/* Background transparency change function */
@function alpha-grad($grad, $alpha: 1) {
  @if ($grad : $primary-grad) {
    @return linear-gradient(180deg, rgba(188, 156, 255, $alpha) 0%, rgba(139, 164, 249, $alpha) 100%);
  }
  @else if ($grad : $secondary-grad) {
    @return linear-gradient(180deg, rgba(111, 207, 151, $alpha) 0%, rgba(102, 210, 234, $alpha) 100%);
  }
}

// px to rem
@function rem($pixels, $context: $main-font-size) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return decimal-round(($pixels / $context * 1rem), 2);
}

@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// function for rounding to hundredths
@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;

  //$number must be a number
  @if type-of($number) !=number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }

  //$digits must be a unitless number
  @if type-of($digits) !=number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  }

  @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }

  @if $digits>0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }

  @if $mode==round {
    @return round($number * $n)/$n;
  }

  @else if $mode==ceil {
    @return ceil($number * $n)/$n;
  }

  @else if $mode==floor {
    @return floor($number * $n)/$n;
  }

  @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

/* Mixins */
